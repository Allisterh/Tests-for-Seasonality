((s^3*(s+1)*c^2)/3)*i^2
}
# Calculate Di
Di <- Ui - Vi
return(list(Ui = Ui, Vi = Vi, Di = Di))
}
run_seasonality_test(quadratic_seasonal, trend="quadratic", s=12)
run_seasonality_test(quadratic_non_seasonal, trend="quadratic", s=12)
exponential <- function(data, s = frequency(data)) {
require(forecast)
require(minpack.lm)
# Decompose the time series using STL
#ts_data <- ts(data, frequency = s)
#decomposed_data <- stl(ts_data, s.window="periodic")
decomposed_data <- decompose(data)
# Extract the seasonality and noise components to get de-trended data
#trend <- as.numeric(decomposed_data$time.series[, "trend"])
#seasonal <- as.numeric(decomposed_data$time.series[, "seasonal"])
#remainder <- as.numeric(decomposed_data$time.series[, "remainder"])
trend <- decomposed_data$trend
seasonal <- decomposed_data$seasonal
remainder <- decomposed_data$random
# De-trended series (seasonal + noise)
detrended <- seasonal + remainder
# Use nlsLM for nonlinear regression
time_index <- 1:length(data)
#start.list <- list(b = 0.5, c = 0.05)
#model <- nlsLM(detrended ~ b * exp(c * time_index), start = start.list)
#a <- coef(model)["a"]
#b <- coef(model)["b"]
#c <- coef(model)["c"]
model <- lm(log(data) ~ poly(time_index, 2))
b <- summary(model)$coefficients[2]
c <- summary(model)$coefficients[3]
# Calculate Ui and Vi for each year
n <- length(data) / s
Ui <- numeric(n)
Vi <- numeric(n)
for (i in 1:n) {
Sj <- detrended[(s*(i-1) + 1):(s*i)]
# Compute Ui
term1 <- b^2 * exp(2 * c * ((i - 1) * s + 1))
term2 <- (1 - exp(2 * c * s)) / (1 - exp(2 * c))
term3 <- (1 / s) * (1 - exp(c * s)) / (1 - exp(c))
term4 <- sum(Sj^2)
term5 <- 2 * b * exp(c * (i - 1) * s) * sum(exp(c * seq_len(s)) * Sj)
Ui[i] <- term1 * (term2 - term3) + term4 + term5
# Compute Vi (without seasonal effect)
Sj <- rep(0, s) # reset Sj for Vi calculation
termVi <- term1 * (term2 - term3)
Vi[i] <- termVi
#Vi[i] <- remainder[i]
}
# Calculate Di
Di <- Ui - Vi
return(list(Ui = Ui, Vi = Vi, Di = Di))
}
run_seasonality_test(exponential_seasonal, trend="exponential", s=12)
if (trend == "linear") {
# Call the linear function from linear.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
linear_result <- linear(data)
Ui <- linear_result$Ui
Vi <- linear_result$Vi
} else if (trend == "quadratic") {
# Call the quadratic function from quadratic.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
quadratic_result <- quadratic(data, s)
Ui <- quadratic_result$Ui
Vi <- quadratic_result$Vi
} else if (trend == "exponential") {
withCallingHandlers({
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/exponential.R")
exponential_result <- exponential(data, s)
di <- exponential_result$di
Ui <- exponential_result$Ui
Vi <- exponential_result$Vi
}, warning = function(w) {
has_warnings <<- TRUE  # Set has_warnings to TRUE if any warning occurs
invokeRestart("muffleWarning")  # This will suppress the original warning messages
})  else {
if (trend == "linear") {
# Call the linear function from linear.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
linear_result <- linear(data)
Ui <- linear_result$Ui
Vi <- linear_result$Vi
} else if (trend == "quadratic") {
# Call the quadratic function from quadratic.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
quadratic_result <- quadratic(data, s)
Ui <- quadratic_result$Ui
Vi <- quadratic_result$Vi
} else if (trend == "exponential") {
withCallingHandlers({
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/exponential.R")
exponential_result <- exponential(data, s)
di <- exponential_result$di
Ui <- exponential_result$Ui
Vi <- exponential_result$Vi
}, warning = function(w) {
has_warnings <<- TRUE  # Set has_warnings to TRUE if any warning occurs
invokeRestart("muffleWarning")  # This will suppress the original warning messages
}) else {
seasonality_test <- function(data, trend=NULL, s=12, confidence_level = 0.05, summary_data = TRUE) {
#install.packages("crayon")
require(crayon)
require(DescTools)
# Ensure that the data is converted to a time series object
data <- convert_to_time_series(data, s)
# Check if confidence_level is between 0 and 1
if (!is.numeric(confidence_level) || confidence_level <= 0 || confidence_level >= 1) {
stop("Invalid confidence_level. It should be a number between 0 and 1.")
}
# If the trend was not specified, call the identify_trend function
trend_not_specified <- is.null(trend)
if (trend_not_specified) {
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/default.R")
result <- identify_trend(data, s)
if (is.null(result$trend)) {
stop("No clear trend detected in the data.")
}
data <- result$data_ts
trend <- result$trend
}
# Check if s belongs to the supported values if not NULL
if (!is.null(s) &&
(!is.character(s) && !is.numeric(s)) ||
!(s %in% c("weekly", "monthly", "quarterly", "yearly", 52, 12, 4, 1))) {
stop("Invalid value for 's'. Allowed values: 'weekly', 'monthly', 'quarterly', 'yearly' or 52, 12, 4, 1.")
}
# Check if trend belongs to the supported values if not NULL
if (!is.null(trend) && !trend %in% c("linear", "quadratic", "exponential")) {
stop("Invalid/Unknown trend. Supported options: linear, quadratic, and exponential")
}
has_warnings <- FALSE
if (trend == "linear") {
# Call the linear function from linear.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
linear_result <- linear(data)
Ui <- linear_result$Ui
Vi <- linear_result$Vi
} else if (trend == "quadratic") {
# Call the quadratic function from quadratic.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
quadratic_result <- quadratic(data, s)
Ui <- quadratic_result$Ui
Vi <- quadratic_result$Vi
} else if (trend == "exponential") {
# Call the exponential function from exponential.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/exponential.R")
exponential_result <- exponential(data, s)
Ui <- exponential_result$Ui
Vi <- exponential_result$Vi
}  else {
stop("Invalid trending curve. Supported options: linear, quadratic, exponential")
}
is_seasonal <- FALSE
# Perform the statistical tests if there are enough observations
# T Test
t_test_result <- t.test(Ui, Vi, conf.level = (1-confidence_level))
p_value_t <- t_test_result$p.value
# SIGN Test
sign_test_result <- SignTest(Ui, Vi, conf.level = (1-confidence_level))
p_value_sign <- sign_test_result$p.value
#Wilcoxon SR test
wilcox_test_result <- wilcox.test(Ui, Vi, conf.level = (1-confidence_level), paired = TRUE)
p_value_wilcox <- wilcox_test_result$p.value
#is_seasonal <- p_value_t < confidence_level || p_value_sign < confidence_level || p_value_wilcox < confidence_level
is_seasonal <- all(p_value_t < confidence_level, p_value_sign < confidence_level, p_value_wilcox < confidence_level)
# Calculate relevant statistical summary for each test
t_summary <- summary(t_test_result)
sign_summary <- summary(sign_test_result)
wilcox_summary <- summary(wilcox_test_result)
# Prepare the results summary
summary_data <- data.frame(
Test = c("Student t-Distribution", "Sign Test", "Wilcoxon Signed-Ranks Test"),
p_value = c(p_value_t, p_value_sign, p_value_wilcox),
stringsAsFactors = FALSE
)
# Prepare the result message
if(is_seasonal){
result_message <- paste("There appears to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
} else {
result_message <- paste("There does not appear to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
}
# Bundle everything into a list to return
result <- list(
message = result_message,
summary_data = summary_data,
data_ts = if (trend_not_specified) result$data_ts else data,
trend = trend,
trend_not_specified = trend_not_specified,
has_warnings = has_warnings
)
return(result)
}
run_seasonality_test(exponential_seasonal, trend="exponential", s=12)
run_seasonality_test(gcag_ts, s=12)
exponential <- function(data, s = frequency(data)) {
require(forecast)
require(minpack.lm)
# Decompose the time series using STL
#ts_data <- ts(data, frequency = s)
#decomposed_data <- stl(ts_data, s.window="periodic")
decomposed_data <- decompose(data)
# Extract the seasonality and noise components to get de-trended data
#trend <- as.numeric(decomposed_data$time.series[, "trend"])
#seasonal <- as.numeric(decomposed_data$time.series[, "seasonal"])
#remainder <- as.numeric(decomposed_data$time.series[, "remainder"])
trend <- decomposed_data$trend
seasonal <- decomposed_data$seasonal
remainder <- decomposed_data$random
# De-trended series (seasonal + noise)
detrended <- seasonal + remainder
# Use nlsLM for nonlinear regression
time_index <- 1:length(data)
start.list <- list(b = 0.5, c = 0.05)
model <- nlsLM(detrended ~ b * exp(c * time_index), start = start.list)
a <- coef(model)["a"]
b <- coef(model)["b"]
c <- coef(model)["c"]
# Calculate Ui and Vi for each year
n <- length(data) / s
Ui <- numeric(n)
Vi <- numeric(n)
for (i in 1:n) {
Sj <- detrended[(s*(i-1) + 1):(s*i)]
# Compute Ui
term1 <- b^2 * exp(2 * c * ((i - 1) * s + 1))
term2 <- (1 - exp(2 * c * s)) / (1 - exp(2 * c))
term3 <- (1 / s) * (1 - exp(c * s)) / (1 - exp(c))
term4 <- sum(Sj^2)
term5 <- 2 * b * exp(c * (i - 1) * s) * sum(exp(c * seq_len(s)) * Sj)
Ui[i] <- term1 * (term2 - term3) + term4 + term5
# Compute Vi (without seasonal effect)
Sj <- rep(0, s) # reset Sj for Vi calculation
termVi <- term1 * (term2 - term3)
Vi[i] <- termVi
#Vi[i] <- remainder[i]
}
# Calculate Di
Di <- Ui - Vi
return(list(Ui = Ui, Vi = Vi, Di = Di))
}
run_seasonality_test(gcag_ts, s=12)
run_seasonality_test(gcag_ts)
mean(5, 2, 4)
seasonality_test <- function(data, trend=NULL, s=12, confidence_level = 0.05, summary_data = TRUE) {
#install.packages("crayon")
require(crayon)
require(DescTools)
# Ensure that the data is converted to a time series object
data <- convert_to_time_series(data, s)
# Check if confidence_level is between 0 and 1
if (!is.numeric(confidence_level) || confidence_level <= 0 || confidence_level >= 1) {
stop("Invalid confidence_level. It should be a number between 0 and 1.")
}
# If the trend was not specified, call the identify_trend function
trend_not_specified <- is.null(trend)
if (trend_not_specified) {
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/default.R")
result <- identify_trend(data, s)
if (is.null(result$trend)) {
stop("No clear trend detected in the data.")
}
data <- result$data_ts
trend <- result$trend
}
# Check if s belongs to the supported values if not NULL
if (!is.null(s) &&
(!is.character(s) && !is.numeric(s)) ||
!(s %in% c("weekly", "monthly", "quarterly", "yearly", 52, 12, 4, 1))) {
stop("Invalid value for 's'. Allowed values: 'weekly', 'monthly', 'quarterly', 'yearly' or 52, 12, 4, 1.")
}
# Check if trend belongs to the supported values if not NULL
if (!is.null(trend) && !trend %in% c("linear", "quadratic", "exponential")) {
stop("Invalid/Unknown trend. Supported options: linear, quadratic, and exponential")
}
has_warnings <- FALSE
if (trend == "linear") {
# Call the linear function from linear.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
linear_result <- linear(data)
Ui <- linear_result$Ui
Vi <- linear_result$Vi
} else if (trend == "quadratic") {
# Call the quadratic function from quadratic.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
quadratic_result <- quadratic(data, s)
Ui <- quadratic_result$Ui
Vi <- quadratic_result$Vi
} else if (trend == "exponential") {
# Call the exponential function from exponential.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/exponential.R")
exponential_result <- exponential(data, s)
Ui <- exponential_result$Ui
Vi <- exponential_result$Vi
}  else {
stop("Invalid trending curve. Supported options: linear, quadratic, exponential")
}
is_seasonal <- FALSE
# Perform the statistical tests if there are enough observations
# T Test
t_test_result <- t.test(mean(Ui), mean(Vi), conf.level = (1-confidence_level))
p_value_t <- t_test_result$p.value
# SIGN Test
sign_test_result <- SignTest(mean(Ui), mean(Vi), conf.level = (1-confidence_level))
p_value_sign <- sign_test_result$p.value
#Wilcoxon SR test
wilcox_test_result <- wilcox.test(mean(Ui), mean(Vi), conf.level = (1-confidence_level), paired = TRUE)
p_value_wilcox <- wilcox_test_result$p.value
#is_seasonal <- p_value_t < confidence_level || p_value_sign < confidence_level || p_value_wilcox < confidence_level
is_seasonal <- all(p_value_t < confidence_level, p_value_sign < confidence_level, p_value_wilcox < confidence_level)
# Calculate relevant statistical summary for each test
t_summary <- summary(t_test_result)
sign_summary <- summary(sign_test_result)
wilcox_summary <- summary(wilcox_test_result)
# Prepare the results summary
summary_data <- data.frame(
Test = c("Student t-Distribution", "Sign Test", "Wilcoxon Signed-Ranks Test"),
p_value = c(p_value_t, p_value_sign, p_value_wilcox),
stringsAsFactors = FALSE
)
# Prepare the result message
if(is_seasonal){
result_message <- paste("There appears to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
} else {
result_message <- paste("There does not appear to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
}
# Bundle everything into a list to return
result <- list(
message = result_message,
summary_data = summary_data,
data_ts = if (trend_not_specified) result$data_ts else data,
trend = trend,
trend_not_specified = trend_not_specified,
has_warnings = has_warnings
)
return(result)
}
run_seasonality_test(quadratic_non_seasonal, trend="quadratic", s=12)
run_seasonality_test(nq__ts, seasons_to_check=1:3, trend="exponential", s=12)
run_seasonality_test(nq__ts, seasons_to_check=1:3, trend="exponential", s=12)
seasonality_test <- function(data, trend=NULL, s=12, confidence_level = 0.05, seasons_to_check = 1:s, summary_data = TRUE) {
#install.packages("crayon")
require(crayon)
require(DescTools)
# Ensure that the data is converted to a time series object
data <- convert_to_time_series(data, s)
# Check if confidence_level is between 0 and 1
if (!is.numeric(confidence_level) || confidence_level <= 0 || confidence_level >= 1) {
stop("Invalid confidence_level. It should be a number between 0 and 1.")
}
# If the trend was not specified, call the identify_trend function
trend_not_specified <- is.null(trend)
if (trend_not_specified) {
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/default.R")
result <- identify_trend(data, s)
if (is.null(result$trend)) {
stop("No clear trend detected in the data.")
}
data <- result$data_ts
trend <- result$trend
}
# Check if s belongs to the supported values if not NULL
if (!is.null(s) &&
(!is.character(s) && !is.numeric(s)) ||
!(s %in% c("weekly", "monthly", "quarterly", "yearly", 52, 12, 4, 1))) {
stop("Invalid value for 's'. Allowed values: 'weekly', 'monthly', 'quarterly', 'yearly' or 52, 12, 4, 1.")
}
# Check if trend belongs to the supported values if not NULL
if (!is.null(trend) && !trend %in% c("linear", "quadratic", "exponential")) {
stop("Invalid/Unknown trend. Supported options: linear, quadratic, and exponential")
}
has_warnings <- FALSE
if (trend == "linear") {
# Call the linear function from linear.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
linear_result <- linear(data)
Ui <- linear_result$Ui
Vi <- linear_result$Vi
} else if (trend == "quadratic") {
# Call the quadratic function from quadratic.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
quadratic_result <- quadratic(data, s)
Ui <- quadratic_result$Ui
Vi <- quadratic_result$Vi
} else if (trend == "exponential") {
# Call the exponential function from exponential.R
source("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/exponential.R")
exponential_result <- exponential(data, s)
Ui <- exponential_result$Ui
Vi <- exponential_result$Vi
}  else {
stop("Invalid trending curve. Supported options: linear, quadratic, exponential")
}
is_seasonal <- FALSE
# Perform the statistical tests if there are enough observations
# T Test
t_test_result <- t.test(Ui, Vi, conf.level = (1-confidence_level))
p_value_t <- t_test_result$p.value
# SIGN Test
sign_test_result <- SignTest(Ui, Vi, conf.level = (1-confidence_level))
p_value_sign <- sign_test_result$p.value
#Wilcoxon SR test
wilcox_test_result <- wilcox.test(Ui, Vi, conf.level = (1-confidence_level), paired = TRUE)
p_value_wilcox <- wilcox_test_result$p.value
#is_seasonal <- p_value_t < confidence_level || p_value_sign < confidence_level || p_value_wilcox < confidence_level
is_seasonal <- all(p_value_t < confidence_level, p_value_sign < confidence_level, p_value_wilcox < confidence_level)
# Calculate relevant statistical summary for each test
t_summary <- summary(t_test_result)
sign_summary <- summary(sign_test_result)
wilcox_summary <- summary(wilcox_test_result)
# Prepare the results summary
summary_data <- data.frame(
Test = c("Student t-Distribution", "Sign Test", "Wilcoxon Signed-Ranks Test"),
p_value = c(p_value_t, p_value_sign, p_value_wilcox),
stringsAsFactors = FALSE
)
# Prepare the result message
if(is_seasonal){
result_message <- paste("There appears to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
} else {
result_message <- paste("There does not appear to be statistically significant seasonality in the data at the", 100-(confidence_level * 100), "% confidence level.")
}
# Bundle everything into a list to return
result <- list(
message = result_message,
summary_data = summary_data,
data_ts = if (trend_not_specified) result$data_ts else data,
trend = trend,
trend_not_specified = trend_not_specified,
has_warnings = has_warnings
)
return(result)
}
#' data <- c(10, 15, 20, 15, 10)
#' result <- seasonality_test(data, trend = "quadratic", s = 2, confidence_level = 0.01)
#' print(result)
#'
#' # Example 3: Exponential Trend with Default Confidence Level and Summary Data
#' data <- c(10, 15, 20, 15, 10)
#' result <- seasonality_test(data, trend = "exponential", s = 0.5, summary_data = TRUE)
#' print(result)
#'
#' @export
run_seasonality_test <- function(data, trend=NULL, s=12, confidence_level = 0.05, seasons_to_check = 1:s, summary_data = TRUE) {
if (is.null(trend)) {
# If trend is NULL, run interactive version of seasonality test
interactive_seasonality_test(data, s, confidence_level, summary_data)
} else {
# If trend is specified, run regular version of seasonality test
result <- seasonality_test(data, trend, s, confidence_level, summary_data)
print_result <- result
print_result$data_ts <- NULL
print_result$trend_not_specified <- NULL
print(print_result)
}
}
interactive_seasonality_test <- function(data, s=12, confidence_level = 0.05, seasons_to_check = 1:s, summary_data = TRUE) {
# First, run the seasonality test without specifying a trend
result <- seasonality_test(data, trend=NULL, s=s, confidence_level=confidence_level, summary_data=summary_data)
result_to_print <- result
result_to_print$data_ts <- NULL
result_to_print$trend <- NULL
result_to_print$trend_not_specified <- NULL
print(result_to_print)
# Then, check if a trend was not specified in the result
if (result$trend_not_specified) {
# Print a warning and the identified trend
cat(red("WARNING - UNRELIABLE RESULT: You did not specify a trend type. For greater accuracy, please specify a trend.\n"))
cat(blue(paste("Identified trend: ", result$trend, "\n")))
# Decompose the data and plot the trend component
decomposed <- decompose(result$data_ts)
plot(decomposed$trend, main = "Trend Component of Time Series Data", ylab = "Trend")
# Ask the user if they want to rerun the test with a specified trend
valid_responses <- c("yes", "Yes", "YES", "No", "NO", "no")
response <- tolower(readline(prompt = "Would you like to visually inspect the trend and identify the most suitable trend? (yes/no): "))
while (!response %in% valid_responses) {
cat(red("Invalid response. Please enter 'yes' or 'no'.\n"))
response <- tolower(readline(prompt = "Would you like to visually inspect the trend and identify the most suitable trend? (yes/no): "))
}
if (tolower(response) == "yes") {
# Ask the user for the trend to test
trend <- readline(prompt = "Inspect the plot of the trend and select the most suitable trend (linear, quadratic, exponential): ")
# Rerun the test with the specified trend
result <- seasonality_test(data, trend, window, s, confidence_level)
# Print the result excluding data_ts
print(result$message)
print(result$summary_data)
}
} else {
print(result$message)
print(result$summary_data)
}
}
run_seasonality_test(linear_seasonal, trend="linear", seasons_to_check=1:3, s=12)
run_seasonality_test(linear_seasonal, trend="linear", seasons_to_check=1:3, s=1)
length(quadratic_non_seasonal)
knitr::stitch('linear.r')
knitr::stitch('/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R')
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/linear.R")
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
knitr::opts_knit$set(r.opts = list(sessioninfo = NULL))
knitr::stitch("/Users/jay/Documents/Documents - Jay's Macbook Pro (13281)/MSc Data Science & Analytics - UoL/Dissertation/disso 2/R/quadratic.R")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
knitr::opts_chunk$set(echo = FALSE)
